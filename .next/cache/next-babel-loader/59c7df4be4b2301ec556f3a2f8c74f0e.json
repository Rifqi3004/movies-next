{"ast":null,"code":"import { createStore } from 'redux';\nimport reducers from \"./reducers\";\nimport middlewares from './middlewares';\nexport var initStore = function initStore(reducers, initialState) {\n  return createStore(reducers, initialState, middlewares);\n};\nexport var makeStore = function makeStore(initialState, _ref) {\n  var isServer = _ref.isServer,\n      req = _ref.req,\n      debug = _ref.debug,\n      storeKey = _ref.storeKey;\n\n  if (isServer) {\n    initialState = initialState || {\n      fromServer: 'foo'\n    };\n    return initStore(reducers, initialState);\n  } else {\n    // we need it only on client side\n    var _require = require('redux-persist'),\n        persistStore = _require.persistStore,\n        persistReducer = _require.persistReducer;\n\n    var storage = require('redux-persist/lib/storage')[\"default\"];\n\n    var persistConfig = {\n      key: 'nextjs',\n      whitelist: ['auth'],\n      // make sure it does not clash with server keys\n      storage: storage\n    };\n    var persistedReducer = persistReducer(persistConfig, reducers);\n    var store = initStore(persistedReducer, initialState);\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Works/me/tes/movieaja/redux/store.js"],"names":["createStore","reducers","middlewares","initStore","initialState","makeStore","isServer","req","debug","storeKey","fromServer","require","persistStore","persistReducer","storage","persistConfig","key","whitelist","persistedReducer","store","__persistor"],"mappings":"AAAA,SAAUA,WAAV,QAA6B,OAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,QAAD,EAAWG,YAAX,EAA4B;AACjD,SAAOJ,WAAW,CAACC,QAAD,EAAWG,YAAX,EAAyBF,WAAzB,CAAlB;AAEH,CAHM;AAKP,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACD,YAAD,QAAoD;AAAA,MAApCE,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,GAA0B,QAA1BA,GAA0B;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAEzE,MAAIH,QAAJ,EAAc;AAEVF,IAAAA,YAAY,GAAGA,YAAY,IAAI;AAACM,MAAAA,UAAU,EAAE;AAAb,KAA/B;AAEA,WAAOP,SAAS,CAACF,QAAD,EAAWG,YAAX,CAAhB;AAEH,GAND,MAMO;AAEH;AAFG,mBAGoCO,OAAO,CAAC,eAAD,CAH3C;AAAA,QAGIC,YAHJ,YAGIA,YAHJ;AAAA,QAGkBC,cAHlB,YAGkBA,cAHlB;;AAIH,QAAMC,OAAO,GAAGH,OAAO,CAAC,2BAAD,CAAP,WAAhB;;AAEA,QAAMI,aAAa,GAAG;AAClBC,MAAAA,GAAG,EAAE,QADa;AAElBC,MAAAA,SAAS,EAAE,CAAC,MAAD,CAFO;AAEG;AACrBH,MAAAA,OAAO,EAAPA;AAHkB,KAAtB;AAMA,QAAMI,gBAAgB,GAAGL,cAAc,CAACE,aAAD,EAAgBd,QAAhB,CAAvC;AACA,QAAMkB,KAAK,GAAGhB,SAAS,CAACe,gBAAD,EAAmBd,YAAnB,CAAvB;AAEAe,IAAAA,KAAK,CAACC,WAAN,GAAoBR,YAAY,CAACO,KAAD,CAAhC,CAfG,CAesC;;AAEzC,WAAOA,KAAP;AACH;AACJ,CA3BM","sourcesContent":["import {  createStore } from 'redux'\nimport reducers from \"./reducers\"\nimport middlewares from './middlewares';\n\nexport const initStore = (reducers, initialState) => {\n    return createStore(reducers, initialState, middlewares);\n\n};\n\nexport const makeStore = (initialState, {isServer, req, debug, storeKey}) => {\n\n    if (isServer) {\n\n        initialState = initialState || {fromServer: 'foo'};\n\n        return initStore(reducers, initialState);\n\n    } else {\n\n        // we need it only on client side\n        const {persistStore, persistReducer} = require('redux-persist')\n        const storage = require('redux-persist/lib/storage').default;\n\n        const persistConfig = {\n            key: 'nextjs',\n            whitelist: ['auth'], // make sure it does not clash with server keys\n            storage\n        };\n\n        const persistedReducer = persistReducer(persistConfig, reducers);\n        const store = initStore(persistedReducer, initialState);\n\n        store.__persistor = persistStore(store); // Nasty hack\n\n        return store;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}