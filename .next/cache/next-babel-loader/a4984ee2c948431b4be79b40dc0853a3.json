{"ast":null,"code":"import { createStore } from 'redux';\nimport reducers from \"./reducers\";\nimport middlewares from './middlewares';\nexport const initStore = (reducers, initialState) => {\n  return createStore(reducers, initialState, middlewares);\n};\nexport const makeStore = (initialState, {\n  isServer,\n  req,\n  debug,\n  storeKey\n}) => {\n  if (isServer) {\n    initialState = initialState || {\n      fromServer: 'foo'\n    };\n    return makeConfiguredStore(reducers, initialState);\n  } else {\n    // we need it only on client side\n    const {\n      persistStore,\n      persistReducer\n    } = require('redux-persist');\n\n    const storage = require('redux-persist/lib/storage').default;\n\n    const persistConfig = {\n      key: 'nextjs',\n      whitelist: ['fromClient'],\n      // make sure it does not clash with server keys\n      storage\n    };\n    const persistedReducer = persistReducer(persistConfig, reducers);\n    const store = makeConfiguredStore(persistedReducer, initialState);\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};","map":{"version":3,"sources":["/Users/macbook/Works/me/tes/movieaja/redux/store.js"],"names":["createStore","reducers","middlewares","initStore","initialState","makeStore","isServer","req","debug","storeKey","fromServer","makeConfiguredStore","persistStore","persistReducer","require","storage","default","persistConfig","key","whitelist","persistedReducer","store","__persistor"],"mappings":"AAAA,SAAUA,WAAV,QAA6B,OAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACF,QAAD,EAAWG,YAAX,KAA4B;AACjD,SAAOJ,WAAW,CAACC,QAAD,EAAWG,YAAX,EAAyBF,WAAzB,CAAlB;AAEH,CAHM;AAKP,OAAO,MAAMG,SAAS,GAAG,CAACD,YAAD,EAAe;AAACE,EAAAA,QAAD;AAAWC,EAAAA,GAAX;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAf,KAAoD;AAEzE,MAAIH,QAAJ,EAAc;AAEVF,IAAAA,YAAY,GAAGA,YAAY,IAAI;AAACM,MAAAA,UAAU,EAAE;AAAb,KAA/B;AAEA,WAAOC,mBAAmB,CAACV,QAAD,EAAWG,YAAX,CAA1B;AAEH,GAND,MAMO;AAEH;AACA,UAAM;AAACQ,MAAAA,YAAD;AAAeC,MAAAA;AAAf,QAAiCC,OAAO,CAAC,eAAD,CAA9C;;AACA,UAAMC,OAAO,GAAGD,OAAO,CAAC,2BAAD,CAAP,CAAqCE,OAArD;;AAEA,UAAMC,aAAa,GAAG;AAClBC,MAAAA,GAAG,EAAE,QADa;AAElBC,MAAAA,SAAS,EAAE,CAAC,YAAD,CAFO;AAES;AAC3BJ,MAAAA;AAHkB,KAAtB;AAMA,UAAMK,gBAAgB,GAAGP,cAAc,CAACI,aAAD,EAAgBhB,QAAhB,CAAvC;AACA,UAAMoB,KAAK,GAAGV,mBAAmB,CAACS,gBAAD,EAAmBhB,YAAnB,CAAjC;AAEAiB,IAAAA,KAAK,CAACC,WAAN,GAAoBV,YAAY,CAACS,KAAD,CAAhC,CAfG,CAesC;;AAEzC,WAAOA,KAAP;AACH;AACJ,CA3BM","sourcesContent":["import {  createStore } from 'redux'\nimport reducers from \"./reducers\"\nimport middlewares from './middlewares';\n\nexport const initStore = (reducers, initialState) => {\n    return createStore(reducers, initialState, middlewares);\n\n};\n\nexport const makeStore = (initialState, {isServer, req, debug, storeKey}) => {\n\n    if (isServer) {\n\n        initialState = initialState || {fromServer: 'foo'};\n\n        return makeConfiguredStore(reducers, initialState);\n\n    } else {\n\n        // we need it only on client side\n        const {persistStore, persistReducer} = require('redux-persist');\n        const storage = require('redux-persist/lib/storage').default;\n\n        const persistConfig = {\n            key: 'nextjs',\n            whitelist: ['fromClient'], // make sure it does not clash with server keys\n            storage\n        };\n\n        const persistedReducer = persistReducer(persistConfig, reducers);\n        const store = makeConfiguredStore(persistedReducer, initialState);\n\n        store.__persistor = persistStore(store); // Nasty hack\n\n        return store;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}