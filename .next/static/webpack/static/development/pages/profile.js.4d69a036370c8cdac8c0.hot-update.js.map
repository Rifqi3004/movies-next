{"version":3,"file":"static/webpack/static/development/pages/profile.js.4d69a036370c8cdac8c0.hot-update.js","sources":["webpack:///./components/Auth/Login.js"],"sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {Grid, Card, CardHeader, CardContent ,Button} from '@material-ui/core'\nimport {GetGenre, PostActiveGenre, GetMovieGenre} from '../../redux/actions/movie'\nimport axios from 'axios'\nimport colors from '../../tools/colors';\n\nconst Login = () => {\n        return (\n            <>\n               <div className=\"login\">\n                <div className=\"card-login\">\n                    <div className=\"card-header\">\n                        <h4 className=\"head-login\">Login ke {process.env.APP_NAME}</h4>\n                    </div>\n                    <div className=\"card-header\">\n                        <Formik\n                            initialValues={{ email: '', password: '' }}\n                            validate={values => {\n                                const errors = {};\n                                if (!values.email) {\n                                errors.email = 'Required';\n                                } else if (\n                                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                                ) {\n                                errors.email = 'Invalid email address';\n                                }\n                                return errors;\n                            }}\n                            onSubmit={(values, { setSubmitting }) => {\n                                console.log(value)\n                                setTimeout(() => {\n                                alert(JSON.stringify(values, null, 2));\n                                setSubmitting(false);\n                                }, 400);\n                            }}\n                            >\n                            {({ isSubmitting }) => (\n                                <Form>\n                                <Field type=\"text\" name=\"username\" />\n                                <ErrorMessage name=\"username\" component=\"div\" />\n                                <Field type=\"password\" name=\"password\" />\n                                <ErrorMessage name=\"password\" component=\"div\" />\n                                <button type=\"submit\" disabled={isSubmitting}>\n                                    Login\n                                </button>\n                                </Form>\n                            )}\n                        </Formik>\n                    </div>\n                </div>\n               </div>\n               <style jsx>{`\n                    .login {\n                        display:flex;\n                        justify-content: center;\n                    }\n                    .card-login {\n                        width: 500px;\n                        display: flex;\n                        flex-direction: column;\n                        background: #ffffff;\n                        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n                        transition: 0.3s;\n                        position: abosulute;\n                        top: 50%;\n                        left: 50%;\n                    }\n                    .card-login:hover {\n                        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n                    }\n\n                    .head-login {\n                        font-family: Poppins;\n                        font-size: 16px;\n                        font-color: ${colors.blackPrimary};\n                        text-align: center;\n                        font-weight: 400;\n                    }\n\n               `}</style>\n            </>\n        )\n}\nconst mapStateToProps = (state) => ({\n    auth : state.auth\n})\n\nexport default connect(mapStateToProps)(Login)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AA5BA;AAAA;AAAA;AAAA;AA0EA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAGA;;;;;A","sourceRoot":""}